package org.fhcrc.matsen.startree;

import dr.math.EmpiricalBayesPoissonSmoother;
import org.junit.Assert;
import org.junit.Test;

import java.util.Arrays;

/**
 * Created by cmccoy on 12/27/13.
 *
 * <code>
 * set.seed(1)
 *
 * n <- 1000
 *
 * alpha <- 1.0
 * beta <- 2.0
 * rg <- rgamma(n, alpha, 1 / beta)
 * tl <- rep(50.0, n)
 * rp <- unlist(lapply(seq_along(tl), function(i) rpois(1, tl[i] * rg[i])))
 *
 * cat(paste(rp, collapse=', '), '\n')
 * </code>
 */
public class TLambdaPoissonSmootherTest {
    public final double TOL = 1e-5;

    @Test
    public void testSmooth() throws Exception {
        final double[] arr = new double[] {7, 173, 204, 95, 125, 127, 106, 34, 12, 14, 28, 33, 3, 130, 96, 145, 128, 51, 119, 142, 10, 26, 48, 42, 19, 88, 28, 160, 121, 25, 17, 98, 8, 367, 101, 15, 7, 214, 257, 33, 34, 37, 27, 9, 240, 353, 86, 7, 53, 0, 67, 53, 49, 23, 182, 105, 33, 119, 59, 156, 28, 118, 207, 10, 165, 124, 244, 92, 84, 119, 14, 7, 8, 239, 113, 148, 94, 254, 15, 57, 55, 428, 27, 61, 37, 193, 36, 0, 121, 44, 348, 89, 14, 7, 14, 23, 178, 39, 42, 9, 14, 31, 90, 25, 248, 108, 107, 15, 537, 259, 3, 97, 50, 103, 310, 143, 79, 42, 192, 10, 153, 52, 66, 16, 136, 289, 3, 7, 16, 76, 244, 216, 37, 216, 22, 108, 45, 130, 51, 3, 185, 69, 113, 180, 16, 222, 34, 158, 170, 100, 268, 35, 159, 60, 4, 74, 11, 1, 16, 33, 155, 57, 104, 42, 143, 77, 37, 91, 88, 29, 102, 3, 130, 239, 67, 30, 592, 26, 17, 399, 57, 161, 324, 3, 203, 5, 220, 42, 136, 75, 141, 19, 757, 252, 51, 118, 154, 43, 37, 5, 251, 28, 207, 48, 98, 2, 365, 13, 205, 38, 43, 65, 18, 13, 152, 127, 55, 67, 2, 120, 125, 40, 40, 13, 2, 37, 39, 124, 64, 4, 194, 141, 76, 38, 113, 44, 41, 0, 156, 119, 12, 348, 49, 73, 144, 151, 13, 94, 106, 128, 388, 40, 6, 90, 35, 74, 37, 175, 10, 25, 244, 14, 240, 469, 223, 11, 62, 114, 365, 82, 125, 31, 181, 50, 1, 42, 79, 23, 478, 68, 303, 85, 82, 29, 178, 128, 103, 26, 361, 40, 11, 119, 43, 12, 32, 95, 186, 73, 12, 348, 371, 43, 201, 22, 1, 7, 65, 8, 95, 259, 324, 257, 289, 23, 60, 35, 10, 200, 9, 35, 28, 32, 52, 174, 8, 54, 4, 2, 14, 47, 73, 178, 95, 27, 38, 90, 63, 192, 49, 28, 142, 1, 22, 29, 112, 122, 109, 157, 178, 28, 145, 27, 7, 126, 6, 5, 28, 332, 28, 235, 105, 130, 45, 23, 49, 5, 159, 249, 105, 337, 186, 19, 30, 51, 22, 257, 121, 1, 180, 2, 183, 434, 220, 21, 118, 77, 5, 225, 83, 109, 17, 43, 173, 55, 22, 165, 73, 214, 112, 6, 69, 160, 9, 281, 64, 325, 1, 247, 22, 59, 0, 162, 0, 19, 4, 303, 198, 3, 68, 8, 4, 62, 8, 87, 89, 25, 77, 37, 47, 7, 97, 31, 235, 53, 154, 86, 8, 11, 5, 16, 138, 91, 19, 41, 336, 3, 122, 48, 27, 37, 144, 5, 8, 163, 39, 5, 25, 29, 41, 85, 340, 193, 4, 93, 176, 39, 88, 112, 341, 2, 44, 147, 80, 44, 2, 77, 99, 90, 166, 23, 75, 105, 94, 432, 23, 51, 56, 3, 100, 66, 12, 253, 142, 17, 14, 298, 80, 192, 137, 66, 35, 7, 13, 27, 50, 20, 7, 276, 125, 210, 45, 310, 34, 22, 29, 58, 129, 71, 37, 62, 37, 67, 33, 8, 32, 201, 18, 236, 78, 87, 41, 10, 22, 53, 0, 31, 114, 70, 121, 6, 159, 74, 72, 38, 15, 146, 30, 282, 92, 353, 91, 5, 9, 2, 175, 280, 92, 80, 131, 323, 58, 319, 1, 139, 193, 334, 19, 34, 51, 23, 42, 39, 85, 16, 0, 40, 19, 167, 80, 146, 4, 179, 11, 83, 101, 282, 55, 106, 59, 20, 10, 54, 6, 40, 119, 25, 19, 145, 68, 32, 145, 135, 15, 177, 181, 6, 301, 46, 142, 130, 35, 128, 12, 298, 37, 105, 78, 295, 69, 5, 19, 466, 72, 49, 249, 71, 6, 67, 58, 83, 200, 52, 73, 8, 15, 34, 142, 6, 32, 13, 171, 15, 124, 123, 107, 21, 62, 115, 15, 204, 460, 37, 107, 49, 116, 29, 22, 65, 20, 62, 252, 109, 27, 489, 237, 40, 0, 134, 10, 47, 106, 61, 103, 16, 95, 10, 42, 24, 16, 114, 133, 6, 15, 185, 51, 9, 142, 255, 103, 4, 211, 16, 199, 362, 9, 56, 32, 410, 18, 56, 87, 120, 58, 43, 31, 182, 108, 134, 140, 152, 6, 57, 402, 23, 87, 58, 10, 274, 14, 86, 83, 185, 6, 28, 27, 249, 472, 31, 101, 76, 110, 101, 46, 50, 14, 172, 28, 53, 197, 23, 63, 55, 0, 12, 20, 42, 23, 66, 15, 45, 59, 83, 30, 31, 370, 126, 16, 36, 187, 19, 139, 352, 183, 10, 72, 248, 1, 135, 69, 11, 4, 19, 110, 241, 4, 265, 59, 40, 41, 296, 309, 60, 40, 14, 209, 85, 162, 40, 88, 84, 21, 14, 104, 24, 77, 191, 530, 161, 56, 25, 66, 171, 48, 212, 11, 0, 114, 10, 53, 76, 155, 55, 13, 28, 110, 267, 143, 64, 20, 55, 31, 22, 11, 180, 97, 20, 171, 32, 180, 301, 18, 76, 113, 4, 25, 179, 147, 37, 42, 14, 117, 315, 58, 118, 235, 63, 34, 8, 8, 250, 188, 22, 251, 30, 53, 151, 171, 175, 145, 79, 264, 303, 203, 33, 74, 76, 18, 12, 140, 104, 54, 347, 50, 47, 49, 226, 191, 256, 3, 53, 68, 56, 14, 6, 102, 192, 29, 204, 181, 60, 69, 118, 43, 33, 96, 453, 73, 318, 21, 66, 104, 22, 16, 71, 161, 140, 92, 25, 121, 29, 11, 5, 49, 137, 7, 245, 5, 183, 37, 205, 65, 41, 56, 32, 84, 313, 213, 17, 17, 1, 165, 221, 150, 102, 53, 101, 139, 2, 68, 27, 7, 28, 126, 126, 93, 249, 63, 4, 68, 87, 154, 74, 185, 69, 242, 42, 168, 90, 26, 10, 158, 295, 7, 15, 39, 178, 242, 13, 58, 8, 8, 137, 82, 111, 83, 90, 110, 182, 227, 389, 45, 66, 22, 59, 128, 33, 33, 69, 176, 172, 113, 75, 56, 104, 146, 11, 22, 355, 96, 46};
        final double[] t = new double[arr.length];
        Arrays.fill(t, 10.0);

        final double[] tlSmoothed = TLambdaPoissonSmoother.smooth(arr, t);
        final double[] origSmoothed = EmpiricalBayesPoissonSmoother.smooth(arr);

        System.err.println("new:  " + Arrays.toString(tlSmoothed));
        System.err.println("orig: " + Arrays.toString(origSmoothed));

        Assert.assertArrayEquals(origSmoothed, tlSmoothed, TOL);
    }
}
