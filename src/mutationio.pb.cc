// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mutationio.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mutationio {

namespace {

const ::google::protobuf::Descriptor* Partition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Partition_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutationCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutationCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubstitutionModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubstitutionModel_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mutationio_2eproto() {
  protobuf_AddDesc_mutationio_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mutationio.proto");
  GOOGLE_CHECK(file != NULL);
  Partition_descriptor_ = file->message_type(0);
  static const int Partition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, substitution_),
  };
  Partition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Partition_descriptor_,
      Partition::default_instance_,
      Partition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Partition));
  MutationCount_descriptor_ = file->message_type(1);
  static const int MutationCount_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationCount, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationCount, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationCount, partition_),
  };
  MutationCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MutationCount_descriptor_,
      MutationCount::default_instance_,
      MutationCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MutationCount));
  SubstitutionModel_descriptor_ = file->message_type(2);
  static const int SubstitutionModel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubstitutionModel, parameter_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubstitutionModel, value_),
  };
  SubstitutionModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubstitutionModel_descriptor_,
      SubstitutionModel::default_instance_,
      SubstitutionModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubstitutionModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubstitutionModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubstitutionModel));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mutationio_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Partition_descriptor_, &Partition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MutationCount_descriptor_, &MutationCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubstitutionModel_descriptor_, &SubstitutionModel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mutationio_2eproto() {
  delete Partition::default_instance_;
  delete Partition_reflection_;
  delete MutationCount::default_instance_;
  delete MutationCount_reflection_;
  delete SubstitutionModel::default_instance_;
  delete SubstitutionModel_reflection_;
}

void protobuf_AddDesc_mutationio_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020mutationio.proto\022\nmutationio\"!\n\tPartit"
    "ion\022\024\n\014substitution\030\001 \003(\r\"Y\n\rMutationCou"
    "nt\022\014\n\004name\030\001 \001(\t\022\020\n\010distance\030\002 \001(\001\022(\n\tpa"
    "rtition\030\004 \003(\0132\025.mutationio.Partition\":\n\021"
    "SubstitutionModel\022\026\n\016parameter_name\030\001 \003("
    "\t\022\r\n\005value\030\002 \003(\001", 216);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mutationio.proto", &protobuf_RegisterTypes);
  Partition::default_instance_ = new Partition();
  MutationCount::default_instance_ = new MutationCount();
  SubstitutionModel::default_instance_ = new SubstitutionModel();
  Partition::default_instance_->InitAsDefaultInstance();
  MutationCount::default_instance_->InitAsDefaultInstance();
  SubstitutionModel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mutationio_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mutationio_2eproto {
  StaticDescriptorInitializer_mutationio_2eproto() {
    protobuf_AddDesc_mutationio_2eproto();
  }
} static_descriptor_initializer_mutationio_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Partition::kSubstitutionFieldNumber;
#endif  // !_MSC_VER

Partition::Partition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Partition::InitAsDefaultInstance() {
}

Partition::Partition(const Partition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Partition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Partition::~Partition() {
  SharedDtor();
}

void Partition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Partition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Partition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Partition_descriptor_;
}

const Partition& Partition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mutationio_2eproto();  return *default_instance_;
}

Partition* Partition::default_instance_ = NULL;

Partition* Partition::New() const {
  return new Partition;
}

void Partition::Clear() {
  substitution_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Partition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 substitution = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_substitution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_substitution())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_substitution())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_substitution;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Partition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 substitution = 1;
  for (int i = 0; i < this->substitution_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->substitution(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Partition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 substitution = 1;
  for (int i = 0; i < this->substitution_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->substitution(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Partition::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 substitution = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->substitution_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->substitution(i));
    }
    total_size += 1 * this->substitution_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Partition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Partition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Partition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Partition::MergeFrom(const Partition& from) {
  GOOGLE_CHECK_NE(&from, this);
  substitution_.MergeFrom(from.substitution_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Partition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Partition::CopyFrom(const Partition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Partition::IsInitialized() const {
  
  return true;
}

void Partition::Swap(Partition* other) {
  if (other != this) {
    substitution_.Swap(&other->substitution_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Partition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Partition_descriptor_;
  metadata.reflection = Partition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MutationCount::kNameFieldNumber;
const int MutationCount::kDistanceFieldNumber;
const int MutationCount::kPartitionFieldNumber;
#endif  // !_MSC_VER

MutationCount::MutationCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MutationCount::InitAsDefaultInstance() {
}

MutationCount::MutationCount(const MutationCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MutationCount::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MutationCount::~MutationCount() {
  SharedDtor();
}

void MutationCount::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MutationCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutationCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutationCount_descriptor_;
}

const MutationCount& MutationCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mutationio_2eproto();  return *default_instance_;
}

MutationCount* MutationCount::default_instance_ = NULL;

MutationCount* MutationCount::New() const {
  return new MutationCount;
}

void MutationCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    distance_ = 0;
  }
  partition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MutationCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_distance;
        break;
      }
      
      // optional double distance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_partition;
        break;
      }
      
      // repeated .mutationio.Partition partition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_partition;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MutationCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional double distance = 2;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }
  
  // repeated .mutationio.Partition partition = 4;
  for (int i = 0; i < this->partition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->partition(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MutationCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional double distance = 2;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }
  
  // repeated .mutationio.Partition partition = 4;
  for (int i = 0; i < this->partition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->partition(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MutationCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional double distance = 2;
    if (has_distance()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .mutationio.Partition partition = 4;
  total_size += 1 * this->partition_size();
  for (int i = 0; i < this->partition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partition(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutationCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MutationCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MutationCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MutationCount::MergeFrom(const MutationCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  partition_.MergeFrom(from.partition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MutationCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutationCount::CopyFrom(const MutationCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutationCount::IsInitialized() const {
  
  return true;
}

void MutationCount::Swap(MutationCount* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(distance_, other->distance_);
    partition_.Swap(&other->partition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MutationCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutationCount_descriptor_;
  metadata.reflection = MutationCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubstitutionModel::kParameterNameFieldNumber;
const int SubstitutionModel::kValueFieldNumber;
#endif  // !_MSC_VER

SubstitutionModel::SubstitutionModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubstitutionModel::InitAsDefaultInstance() {
}

SubstitutionModel::SubstitutionModel(const SubstitutionModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubstitutionModel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubstitutionModel::~SubstitutionModel() {
  SharedDtor();
}

void SubstitutionModel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubstitutionModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubstitutionModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubstitutionModel_descriptor_;
}

const SubstitutionModel& SubstitutionModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mutationio_2eproto();  return *default_instance_;
}

SubstitutionModel* SubstitutionModel::default_instance_ = NULL;

SubstitutionModel* SubstitutionModel::New() const {
  return new SubstitutionModel;
}

void SubstitutionModel::Clear() {
  parameter_name_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubstitutionModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string parameter_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameter_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_parameter_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parameter_name(0).data(), this->parameter_name(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_parameter_name;
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }
      
      // repeated double value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubstitutionModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string parameter_name = 1;
  for (int i = 0; i < this->parameter_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->parameter_name(i).data(), this->parameter_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->parameter_name(i), output);
  }
  
  // repeated double value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->value(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubstitutionModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string parameter_name = 1;
  for (int i = 0; i < this->parameter_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parameter_name(i).data(), this->parameter_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->parameter_name(i), target);
  }
  
  // repeated double value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->value(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubstitutionModel::ByteSize() const {
  int total_size = 0;
  
  // repeated string parameter_name = 1;
  total_size += 1 * this->parameter_name_size();
  for (int i = 0; i < this->parameter_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->parameter_name(i));
  }
  
  // repeated double value = 2;
  {
    int data_size = 0;
    data_size = 8 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubstitutionModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubstitutionModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubstitutionModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubstitutionModel::MergeFrom(const SubstitutionModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameter_name_.MergeFrom(from.parameter_name_);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubstitutionModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstitutionModel::CopyFrom(const SubstitutionModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstitutionModel::IsInitialized() const {
  
  return true;
}

void SubstitutionModel::Swap(SubstitutionModel* other) {
  if (other != this) {
    parameter_name_.Swap(&other->parameter_name_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubstitutionModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubstitutionModel_descriptor_;
  metadata.reflection = SubstitutionModel_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mutationio

// @@protoc_insertion_point(global_scope)
